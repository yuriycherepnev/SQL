#Создание базы банных и использование этой базы данных:
CREATE DATABASE university;
USE university;


#Удаление базы данных:
DROP DATABASE university;

#Посмотреть таблицы дотсупные в базе данных:
SHOW TABLES;

#SQL-команда для создания новой таблицы.
Может понадобиться создать ограничения для определённых столбцов в таблице. При создании таблицы можно задать следующие ограничения:
(ячейка таблицы не может иметь значение NULL;
первичный ключ — PRIMARY KEY(col_name1, col_name2, …);
внешний ключ — FOREIGN KEY(col_namex1, …, col_namexn) REFERENCES table_name(col_namex1, …, col_namexn)

CREATE TABLE instructor (
  ID CHAR(5),
  name VARCHAR(20) NOT NULL,
  dept_name VARCHAR(20),
  salary NUMERIC(8,2),
  PRIMARY KEY (ID),
  FOREIGN KEY (dept_name) REFERENCES department(dept_name)
);


#INSERT INTO <table_name> добавление данных в таблицу:
INSERT INTO University
VALUES ('B', 1157, 'PC');

#UPDATE - SQL-команда для обновления данных таблицы:
UPDATE <table_name>
  SET <col_name1> = <value1>, <col_name2> = <value2>, ...
  WHERE <condition>;
  
UPDATE Store
SET price = price*0.9;

#DELETE
SQL-команда DELETE FROM <table_name> используется для удаления данных из таблицы.
DELETE FROM Laptop
WHERE screen < 12;

DELETE FROM Laptop; - удалить все данные из таблицы

#Удалить таблицу:
DROP TABLE table;

#SELECT - получение данных из таблицы
SELECT * FROM <table_name>; - вывести все данные из таблицы

#SELECT DISTINCT - получение только неповторяющихся данных
SELECT DISTINCT <col_name1>, <col_name2>, …
  FROM <table_name>; 

#WHERE - ключевое слово WHERE в SELECT для указания условий в запросе:
SELECT * FROM course WHERE dept_name = ’Comp’;
SELECT * FROM course WHERE credits > 3;
SELECT * FROM course WHERE dept_name = 'Comp' AND credits > 3; 
(В запросе можно задавать следующие условия:
сравнение текста;
сравнение численных значений;
логические операции AND (и), OR (или) и NOT (отрицание).)

#GROUP BY - Оператор GROUP BY часто используется с агрегатными функциями, такими как COUNT, MAX, MIN, SUM и AVG, для группировки выходных значений.
SELECT COUNT(course_id), dept_name
  FROM course
  GROUP BY dept_name; 
  
#Having - Ключевое слово HAVING было добавлено в SQL по той причине, что WHERE не может использоваться для работы с агрегатными функциями.
SELECT COUNT(course_id), dept_name
  FROM course
  GROUP BY dept_name
  HAVING COUNT(course_id)>1; 
  
#ORDER BY - используется для сортировки результатов запроса по убыванию или возрастанию. ORDER BY отсортирует по возрастанию, если не будет указан способ сортировки ASC или DESC.
SELECT * FROM course ORDER BY credits;
SELECT * FROM course ORDER BY credits DESC;

#BETWEEN используется для выбора значений данных из определённого промежутка. Могут быть использованы числовые и текстовые значения, а также даты.
SELECT * FROM instructor
  WHERE salary BETWEEN 50000 AND 100000; 
  
#Like - Оператор LIKE используется в WHERE, чтобы задать шаблон поиска похожего значения.
SELECT * FROM course WHERE title LIKE ‘%to%’;
SELECT * FROM course WHERE course_id LIKE 'CS-___';

#IN - С помощью IN можно указать несколько значений для оператора WHERE:
SELECT * FROM student
  WHERE dept_name IN (‘Comp. Sci.’, ‘Physics’, ‘Elec. Eng.’);
  
#JOIN - используется для связи двух или более таблиц с помощью общих атрибутов внутри них.
SELECT <col_name1>, <col_name2>, …
  FROM <table_name1>
  JOIN <table_name2>
  ON <table_name1.col_namex> = <table2.col_namex>;
  
#VIEW — это виртуальная таблица SQL, созданная в результате выполнения выражения. 
Она содержит строки и столбцы и очень похожа на обычную SQL-таблицу. 
VIEW всегда показывает самую свежую информацию из базы данных.
CREATE VIEW <view_name> AS
  SELECT <col_name1>, <col_name2>, …
  FROM <table_name>
  WHERE <condition>;
DROP VIEW <view_name>;
  

